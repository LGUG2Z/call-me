// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteMaybeNoContentCode is the HTTP code returned for type DeleteMaybeNoContent
const DeleteMaybeNoContentCode int = 204

/*DeleteMaybeNoContent No Content

swagger:response deleteMaybeNoContent
*/
type DeleteMaybeNoContent struct {
}

// NewDeleteMaybeNoContent creates DeleteMaybeNoContent with default headers values
func NewDeleteMaybeNoContent() *DeleteMaybeNoContent {

	return &DeleteMaybeNoContent{}
}

// WriteResponse to the client
func (o *DeleteMaybeNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteMaybeInternalServerErrorCode is the HTTP code returned for type DeleteMaybeInternalServerError
const DeleteMaybeInternalServerErrorCode int = 500

/*DeleteMaybeInternalServerError Internal Server Error

swagger:response deleteMaybeInternalServerError
*/
type DeleteMaybeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteMaybeInternalServerError creates DeleteMaybeInternalServerError with default headers values
func NewDeleteMaybeInternalServerError() *DeleteMaybeInternalServerError {

	return &DeleteMaybeInternalServerError{}
}

// WithPayload adds the payload to the delete maybe internal server error response
func (o *DeleteMaybeInternalServerError) WithPayload(payload string) *DeleteMaybeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete maybe internal server error response
func (o *DeleteMaybeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMaybeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
